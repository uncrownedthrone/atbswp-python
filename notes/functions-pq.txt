1. Why are functions advantageous to have in your programs?
you don't have to repeat things, you can debug easier

2. When does the code in a function execute: when the function is defined or when the function is called?
when the function is called

3. What statement creates a function?
def function()

4. What is the difference between a function and a function call?
a function when it is created. a function call is when it is invoked/called by the user

5. How many global scopes are there in a Python program? How many local scopes?
1 global scope
local scopes are created whenever there is a new function

6. What happens to variables in a local scope when the function call returns?
variables are forgotten and local scope is destroyed

7. What is a return value? Can a return value be part of an expression?
what a function evaluates to
yes

8. If a function does not have a return statement, what is the return value of a call to that function?
None

9. How can you force a variable in a function to refer to the global variable?
add global before the variable. this will force it to refer to the global variable

10. What is the data type of None?
NoneType

11. What does the import areallyourpetsnamederic statement do?
imports the module by that name

12. If you had a function named bacon() in a module named spam, how would you call it after
importing spam?
spam.bacon()

13. How can you prevent a program from crashing when it gets an error?
use try/except

14. What goes in the try clause? What goes in the except clause?
try - code that could cause an error. what you're trying to evaluate
except - code that executes if there is an error
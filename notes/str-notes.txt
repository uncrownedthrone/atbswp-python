string literals
    "" use double quotes

escape characters
    \' single quote
    \" double quote
    \t tab
    \n new line
    \\ backslash

raw strings
    print(r'That is Carol\'s cat.')
    That is Carol\'s cat.
    useful if you are typing a string value with many backslashes like file path

mutli line string with triple quotes - catnapping.py
    escaping is optional

indexing and slicing strings
    use the same as accessing lists
    spam[0]
    spam[1:3]
    does not modify the original string

in and not in
    'Hello' in 'Hello, World!'
    True

strings inside other strings
    string interpolation
        name = 'Al'
        age = 4000
        'My name is %s. I am %s years old.' (name,age)
    f-strings
        name = 'Al'
        age = 4000
        f'My name is {name}. I am {age} years old.'

upper(), lower(), isupper(), islower() methods
    upper() returns all uppercase letters
    lower() returns all lowercase letters
    isupper() returns boolean if all letters are uppercase
    islower() returns boolean if all letters are lowercase

isX() methods - validateInput.py
    isalpha() = True if the string only consists of letters and isn't blank
    isalnum() = True if the string consists only letters and numbers and isn't blank
    isdecimal() = True if string consists of numeric characters and isn't blank
    isspace() = True if the string only consists of spaces, tabs, and newlines and isn't blank
    istitle() = True if the string only has words that begin with UC followed by only LC

startswith() and endswith() methods
    startswith() = True if string value starts with the string passed to it
    endswith() = True if string value ends with the string passed to it
    useful alternative to == if you need to check only the first or last part rather than the whole thing

join() and split() methods
    join() = combines all of the strings it's passed
        called on a string value and is passed a list value
        ', '.join(['cats','rats','bats'])
            'cats, rats, bats'
        ' '.join(['My', 'name', 'is', 'Simon'])
            'My name is Simon'
        'ABC'.join(['My', 'name', 'is', 'Simon'])
            'MyABCnameABCisABCSimon'
    split() = splits up a string into a list of strings
        'My name is Simon'.split()
            ['My', 'name', 'is', 'Simon']
        'MyABCnameABCisABCSimon'.split('ABC')
            ['My', 'name', 'is', 'Simon']
        'My name is Simon'.split('m')
            ['My na', 'e is Si', 'on']
            (note that this method REMOVES the delimiter in the final list)
    most common use is to split multiline strings along the newline characters

partition() method
    